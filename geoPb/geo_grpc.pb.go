// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: gRPC/geoPb.proto

package geoPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeoProvider_AddressSearch_FullMethodName = "/geoPb.GeoProvider/AddressSearch"
	GeoProvider_GeoCode_FullMethodName       = "/geoPb.GeoProvider/GeoCode"
)

// GeoProviderClient is the client API for GeoProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoProviderClient interface {
	AddressSearch(ctx context.Context, in *AddressSearchRequest, opts ...grpc.CallOption) (*AddressSearchResponse, error)
	GeoCode(ctx context.Context, in *GeoCodeRequest, opts ...grpc.CallOption) (*GeoCodeResponse, error)
}

type geoProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoProviderClient(cc grpc.ClientConnInterface) GeoProviderClient {
	return &geoProviderClient{cc}
}

func (c *geoProviderClient) AddressSearch(ctx context.Context, in *AddressSearchRequest, opts ...grpc.CallOption) (*AddressSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressSearchResponse)
	err := c.cc.Invoke(ctx, GeoProvider_AddressSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoProviderClient) GeoCode(ctx context.Context, in *GeoCodeRequest, opts ...grpc.CallOption) (*GeoCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeoCodeResponse)
	err := c.cc.Invoke(ctx, GeoProvider_GeoCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoProviderServer is the server API for GeoProvider service.
// All implementations must embed UnimplementedGeoProviderServer
// for forward compatibility.
type GeoProviderServer interface {
	AddressSearch(context.Context, *AddressSearchRequest) (*AddressSearchResponse, error)
	GeoCode(context.Context, *GeoCodeRequest) (*GeoCodeResponse, error)
	mustEmbedUnimplementedGeoProviderServer()
}

// UnimplementedGeoProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeoProviderServer struct{}

func (UnimplementedGeoProviderServer) AddressSearch(context.Context, *AddressSearchRequest) (*AddressSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressSearch not implemented")
}
func (UnimplementedGeoProviderServer) GeoCode(context.Context, *GeoCodeRequest) (*GeoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoCode not implemented")
}
func (UnimplementedGeoProviderServer) mustEmbedUnimplementedGeoProviderServer() {}
func (UnimplementedGeoProviderServer) testEmbeddedByValue()                     {}

// UnsafeGeoProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoProviderServer will
// result in compilation errors.
type UnsafeGeoProviderServer interface {
	mustEmbedUnimplementedGeoProviderServer()
}

func RegisterGeoProviderServer(s grpc.ServiceRegistrar, srv GeoProviderServer) {
	// If the following call pancis, it indicates UnimplementedGeoProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeoProvider_ServiceDesc, srv)
}

func _GeoProvider_AddressSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoProviderServer).AddressSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoProvider_AddressSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoProviderServer).AddressSearch(ctx, req.(*AddressSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoProvider_GeoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoProviderServer).GeoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoProvider_GeoCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoProviderServer).GeoCode(ctx, req.(*GeoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoProvider_ServiceDesc is the grpc.ServiceDesc for GeoProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geoPb.GeoProvider",
	HandlerType: (*GeoProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddressSearch",
			Handler:    _GeoProvider_AddressSearch_Handler,
		},
		{
			MethodName: "GeoCode",
			Handler:    _GeoProvider_GeoCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/geoPb.proto",
}
